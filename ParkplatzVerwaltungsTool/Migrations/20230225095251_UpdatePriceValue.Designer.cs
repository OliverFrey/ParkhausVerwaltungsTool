// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkplatzVerwaltungsTool.Models;

#nullable disable

namespace ParkplatzVerwaltungsTool.Migrations
{
    [DbContext(typeof(ParkingHouseSystemContext))]
    [Migration("20230225095251_UpdatePriceValue")]
    partial class UpdatePriceValue
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("ParkplatzVerwaltungsTool.Models.ParkingHouse", b =>
                {
                    b.Property<int>("ParkingHouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParkingHouseName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ParkingHouseId");

                    b.ToTable("ParkingHouses");
                });

            modelBuilder.Entity("ParkplatzVerwaltungsTool.Models.ParkingHouseLevel", b =>
                {
                    b.Property<int>("ParkingHouseLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParkingHouseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParkingHouseLevelName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ParkingHouseLevelId");

                    b.HasIndex("ParkingHouseId");

                    b.ToTable("ParkingHouseLevels");
                });

            modelBuilder.Entity("ParkplatzVerwaltungsTool.Models.ParkingHouseViewModel", b =>
                {
                    b.Property<int>("ParkingHousesParkingHouseId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ParkingHousesParkingHouseId");

                    b.ToTable("ParkingHouseViewModel");
                });

            modelBuilder.Entity("ParkplatzVerwaltungsTool.Models.ParkingPlace", b =>
                {
                    b.Property<int>("ParkingPlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParkingHouseLevelId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParkingPlaceNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParkingPlaceId");

                    b.HasIndex("ParkingHouseLevelId");

                    b.ToTable("ParkingPlaces");
                });

            modelBuilder.Entity("ParkplatzVerwaltungsTool.Models.PermamentUser", b =>
                {
                    b.Property<int>("PermamentUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastPayDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParkingPlaceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PermamentUserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PermamentUserId");

                    b.HasIndex("ParkingPlaceId");

                    b.ToTable("PermamentUsers");
                });

            modelBuilder.Entity("ParkplatzVerwaltungsTool.Models.Price", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParkingHouseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PriceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("PriceValue")
                        .HasColumnType("REAL");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("PriceId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("ParkplatzVerwaltungsTool.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExitDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalCost")
                        .HasColumnType("INTEGER");

                    b.HasKey("TicketId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("ParkplatzVerwaltungsTool.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPermamentUser")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ParkplatzVerwaltungsTool.Models.ParkingHouseLevel", b =>
                {
                    b.HasOne("ParkplatzVerwaltungsTool.Models.ParkingHouse", null)
                        .WithMany("ParkingHouseLevels")
                        .HasForeignKey("ParkingHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParkplatzVerwaltungsTool.Models.ParkingHouseViewModel", b =>
                {
                    b.HasOne("ParkplatzVerwaltungsTool.Models.ParkingHouse", "ParkingHouses")
                        .WithMany()
                        .HasForeignKey("ParkingHousesParkingHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParkingHouses");
                });

            modelBuilder.Entity("ParkplatzVerwaltungsTool.Models.ParkingPlace", b =>
                {
                    b.HasOne("ParkplatzVerwaltungsTool.Models.ParkingHouseLevel", null)
                        .WithMany("ParkingPlaces")
                        .HasForeignKey("ParkingHouseLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParkplatzVerwaltungsTool.Models.PermamentUser", b =>
                {
                    b.HasOne("ParkplatzVerwaltungsTool.Models.ParkingPlace", "ParkingPlace")
                        .WithMany()
                        .HasForeignKey("ParkingPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParkingPlace");
                });

            modelBuilder.Entity("ParkplatzVerwaltungsTool.Models.ParkingHouse", b =>
                {
                    b.Navigation("ParkingHouseLevels");
                });

            modelBuilder.Entity("ParkplatzVerwaltungsTool.Models.ParkingHouseLevel", b =>
                {
                    b.Navigation("ParkingPlaces");
                });
#pragma warning restore 612, 618
        }
    }
}
